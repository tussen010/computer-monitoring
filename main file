
import psutil
import time
import os
import sys
import shutil
import datetime
import pygame
from alarms import AlarmStore   # import från alarms.py

# clears terminal, cls for windows and clear for unix

def clear():
    try:
        os.system("cls" if os.name == "nt" else "clear")
    except Exception:
        pass

def print_menu(menu_choice_number, message_string):
    if menu_choice_number not in [1, 2, 3, 4, 5, 6, 7]:
        print("Invalid menu number.")
        return
    print(f"You selected option {menu_choice_number} - {message_string}")

def clear_line():
    sys.stdout.write("\r" + " " * os.get_terminal_size().columns + "\r")
    sys.stdout.flush()

width = shutil.get_terminal_size().columns if sys.stdout.isatty() else 80

# so you can press any key and you go back to the menu, works on both unix and windows

IS_WINDOWS = (os.name == "nt")
if IS_WINDOWS:
    import msvcrt
    def wait_for_keypress():
        return msvcrt.kbhit()
    def consume_key():
        if msvcrt.kbhit():
            msvcrt.getch()
else:
    import select
    def wait_for_keypress():
        r, _, _ = select.select([sys.stdin], [], [], 0)
        return bool(r)
    def consume_key():
        try:
            sys.stdin.read(1)
        except:
            pass

def format_bytes(b, unit="GB", decimals=2):
    factor = 1024 if unit.upper() == "KB" else 1024**3
    return f"{b / factor:.{decimals}f} {unit.upper()}"

def display_usage(cpu_usage, mem_usage, disk_usage, bars=20, selected=None):
    cpu_percent  = cpu_usage / 100.0
    mem_percent  = mem_usage / 100.0
    disk_percent = disk_usage / 100.0

    cpu_bar  = '█' * int(cpu_percent  * bars) + '-' * (bars - int(cpu_percent  * bars))
    mem_bar  = '█' * int(mem_percent  * bars) + '-' * (bars - int(mem_percent  * bars))
    disk_bar = '█' * int(disk_percent * bars) + '-' * (bars - int(disk_percent * bars))

    vm = psutil.virtual_memory()
    du = psutil.disk_usage('/')

    mem_used_bytes, mem_total_bytes = vm.used, vm.total
    disk_used_bytes, disk_total_bytes = du.used, du.total

    parts = []
    show_all = (selected is None)

    if show_all or 'cpu' in (selected or []):
        parts.append(f"CPU:  |{cpu_bar}| {cpu_usage:6.2f}%")

    if show_all or 'mem' in (selected or []):
        parts.append(
            "RAM:  "
            f"|{mem_bar}| {mem_usage:6.2f}% "
            f"({format_bytes(mem_used_bytes, 'GB')} / {format_bytes(mem_total_bytes, 'GB')} | "
        )

    if show_all or 'disk' in (selected or []):
        parts.append(
            "Disk: "
            f"|{disk_bar}| {disk_usage:6.2f}% "
            f"({format_bytes(disk_used_bytes, 'GB')} / {format_bytes(disk_total_bytes, 'GB')} | "
        )

    print("\r" + "   ".join(parts), end="\r")

def read_metric():
    cpu = psutil.cpu_percent(interval=0.5)
    mem = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent
    return cpu, mem, disk

def format_alarm_dict(a: dict) -> str:
    label = {"cpu": "CPU", "mem": "Memory", "disk": "Disk"}[a["type"]]
    return f"{label} ≥ {a['threshold']:.1f}%"

def list_alarms(mgr: AlarmStore):
    alarms = mgr.list()
    if not alarms:
        print("No alarms configured.")
        print("Press any key to continue...")
    else:
        print("Active alarms:")
        for i, a in enumerate(alarms, 1):
            print(f"  {i}. {format_alarm_dict(a)}")

def remove_alarm(mgr: AlarmStore):
    while True:
        alarms = mgr.list()
        clear()
        if not alarms:       
            print("No alarms configured.")
            return
        list_alarms(mgr)
        s = input("what number do you want to remove? Press just Enter do go back to menu: \n").strip()
        if s == "":
            clear()
            return
        if not s.isdigit():
            print("Put in a valid number.")
            time.sleep(2)
            continue
        i = int(s) - 1
        if not 0 <= i < len(alarms):
            print("Put in a valid number.")
            time.sleep(2)
            continue
        if 0 <= i < len(alarms):
            removed = mgr.remove_index(i)
            clear()
            print(f"Removed: {format_alarm_dict(removed.to_dict())}")
        return
        

def add_alarm(mgr: AlarmStore):
    while True:
        print("""Choose what to set an alarm on:
  1 - CPU usage
  2 - Memory usage
  3 - Disk usage
(Press Enter 2 times to go back to menu)""")
        choice = input("Enter 1,2,3: ").strip()
        mapping = {"1": "cpu", "2": "mem", "3": "disk"}

        if choice == "":
            break
        if choice not in mapping:
            clear()
            print("Please choose 1 (CPU), 2 (Memory), or 3 (Disk).")
            continue

        while True:
            try:
                clear()
                threshold = float(input("Trigger alarm at/or above e.g. 80%: ").strip())
                if not (0 <= threshold <= 100):
                    raise ValueError
                break
            except ValueError:
                print("Enter a valid percentage between 0 and 100.")

        a = mgr.add(mapping[choice], threshold)
        clear()
        print(f"Alarm added: {format_alarm_dict(a.to_dict())}\n")




def check_alarms(mgr: AlarmStore, cpu, mem, disk):
    fired = []
    for a in mgr.alarms:
        if a.type == "cpu" and cpu >= a.threshold:
            fired.append(("CPU", cpu, a.threshold))
        elif a.type == "mem" and mem >= a.threshold:
            fired.append(("Memory", mem, a.threshold))
        elif a.type == "disk" and disk >= a.threshold:
            fired.append(("Disk", disk, a.threshold))

            #larm händer


    if fired:
        print()
        ts = datetime.datetime.now().strftime("%H:%M:%S")
        for label, value, thr in fired:
            print(f"[{ts}] WARNING ALARM!!!: {label} {value:.1f}% (Alarm set at: {thr:.1f}%)", flush=True)
        print()
        pygame.mixer.init()
        pygame.mixer.music.load(r"alarmassets\alarmsound.mp3")
        pygame.mixer.music.play()

        
        
def live_monitor(mgr: AlarmStore, with_alarms=False):
    if with_alarms and mgr.is_empty():
        print("No alarms on. Please create an alarm first (menu option 3).")
        return
    selected = set(a.type for a in mgr.alarms) if (with_alarms and not mgr.is_empty()) else None
    print("Press any key to get back to menu\n")
    try:
        while True:
            cpu, mem, disk = read_metric()
            display_usage(cpu, mem, disk, selected=selected)

            if with_alarms:
                check_alarms(mgr, cpu, mem, disk)

            time.sleep(0.5)
            msg = "alarm is on" if (with_alarms) else ""
            sys.stdout.write("\n" + msg.ljust(width) + "\x1b[1A")
            sys.stdout.flush()

            if wait_for_keypress():
                consume_key()
                clear()
                break

            time.sleep(0.5)
    except KeyboardInterrupt:
        pass

    clear()
    print("monitoring has ended, do you maybe want to change the alarms?")

# so the class can comunicate with other parts
def main(mgr: AlarmStore):
    while True:
        menu_choice = input("""
Choose an option:
  1 - Start monitoring (bars only)
  2 - List active alarms
  3 - Create alarm(s)
  4 - Show alarms
  5 - Start monitoring mode (with alarms)
  6 - Remove alarm
  7 - Quit
""").strip()

        if menu_choice == "1":
            print_menu(1, "CPU, RAM, DISK usage")
            clear()
            print("Press any key to get back to menu\n")
            try:
                while True:
                    display_usage(*read_metric(), bars=20)
                    time.sleep(0.5)
                    if wait_for_keypress():
                        consume_key()
                        clear()
                        break
            except KeyboardInterrupt:
                print("\nBack to menu.")

        elif menu_choice == "2":
            print_menu(2, "list of active alarms")
            clear()
            print("Press any key to get back to menu\n")
            list_alarms(mgr)
            try:
                while True:
                    if wait_for_keypress():
                        consume_key()
                        clear()
                        break
            except KeyboardInterrupt:
                print("\nBack to menu.")

        elif menu_choice == "3":
            print_menu(3, "create alarm(s)")
            clear()
            add_alarm(mgr)
            try:
                while True:
                    if wait_for_keypress():
                        consume_key()
                        clear()
                        break
            except KeyboardInterrupt:
                print("\nBack to menu.")

        elif menu_choice == "4":
            print_menu(4, "show alarms")
            clear()
            list_alarms(mgr)
            try:
                while True:
                    if wait_for_keypress():
                        consume_key()
                        clear()
                        break
            except KeyboardInterrupt:
                print("\nBack to menu.")

        elif menu_choice == "5":
            print_menu(5, "start monitoring mode with alarms")
            clear()
            live_monitor(mgr, with_alarms=True)

        elif menu_choice == "6":
            print_menu(6, "Remove alarm")
            clear()
            remove_alarm(mgr)

        elif menu_choice == "7":
            print_menu(7, "quit")
            clear()
            break
        else:
            clear()
            print("Invalid option. Please select a valid option (1-7).")

    print("Program exited.")

if __name__ == "__main__":
    mgr = AlarmStore("alarms.json")
    main(mgr)
